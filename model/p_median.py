# -*- coding: utf-8 -*-
"""p_median.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11Ny1JtHG1MA4Tdhy53_uPkw0BagpR3nd
"""

!pip install tqdm

import pandas as pd
import numpy as np
import itertools
from tqdm import tqdm

"""## get_total_cost 함수"""

distance_beta = np.array([[1,3,5,7,8,6,3],
                          [2,2,3,7,9,4,3]])
print(np.min(distance_beta, axis=1))

def get_total_cost_with_Weight(distance_Matrix, demand_weight_Vector):
  distance_Matrix = np.min(distance_Matrix, axis=1)
  return distance_Matrix.dot(demand_weight_Vector)

get_total_cost_with_Weight(distance_beta, np.array([1,2]))

"""## get_distance 함수"""

!pip install haversine
from haversine import haversine

# 위경도 입력
Seoul = [37.541, 126.986]  #Latitude, Longitude
Toronto = [43.65, -79.38]

# 거리 계산
haversine(Seoul, Toronto, unit = 'm')

def get_distance(demand_location_List, N_station_location_List):
  distance_Matrix = []
  for demand in demand_location_List:
    distance_Matrix.append([haversine(demand, station, unit='m') for station in N_station_location_List])
  return distance_Matrix

demand_location_list_Beta = [[37.541, 126.986], [37.540, 126.981], [35.541, 130.986]]
station_location_list_Beta = [[43.65, -79.38], [50, -79.38], [43.65, -63.38]]

print(get_distance(demand_location_list_Beta, station_location_list_Beta))

"""## 구글 드라이브 마운트"""

from google.colab import drive
drive.mount('/content/drive')

"""## 반복문으로 후보 N개씩 함수에 대입하여 모든 Cost 계산"""

pool = ['A', 'B', 'C']
print(list(itertools.permutations(pool))) # 3개의 원소로 수열 만들기
print(list(map(''.join, itertools.permutations(pool, 2)))) # 2개의 원소로 수열 만들기

def get_cost_List_for_N_stations(demand_location_List, station_location_List, demand_weight_Vector, N):
  rst_List = []
  N_station_List = list(itertools.combinations(station_location_List, N))
  for i in tqdm(range(len(N_station_List))):
    distance_Matrix = get_distance(demand_location_List=demand_location_List, N_station_location_List=N_station_List[i])
    cost = get_total_cost_with_Weight(distance_Matrix=distance_Matrix, demand_weight_Vector=demand_weight_Vector)
    rst_List.append((N_station_List[i], cost))
    # print(f'getting cost... {}/{len(N_station_List)}')
  #   distance_Matrix = [get_distance(N_station, demand_location) for demand_location in demand_location_List]
  #   distance_Matrix = get_distance(demand_location_List, N_station)
  #   cost = get_total_Cost(distance_Matrix, demand_weight_Vector)
  #   rst_List.append([N_station, cost])
  return pd.DataFrame(rst_List)

"""## 관저동/도마동/봉명동/용전동 뽑기


"""

demand_List = pd.read_csv('/content/drive/MyDrive/공빅데/2.법정동_격자별_환승_및_정류장_갯수/용전동_최종.csv', encoding='cp949').fillna(0)
station_List = pd.read_csv('/content/drive/MyDrive/용전동_트램.csv', encoding='cp949').fillna(0)

demand_List.head(3)

station_List.head(3)

demand_location_List = demand_List[['lon', 'lat']].to_numpy()

station_location_List = station_List[['lon', 'lat']].to_numpy()

weight_Vector = demand_List['환승_sum'].to_numpy()

rst_1 = get_cost_List_for_N_stations(demand_location_List=demand_location_List, station_location_List= station_location_List, demand_weight_Vector= weight_Vector, N=1)
rst_1.to_csv('Yongjeon_P_Median_1.csv')
rst_2 = get_cost_List_for_N_stations(demand_location_List=demand_location_List, station_location_List= station_location_List, demand_weight_Vector= weight_Vector, N=2)
rst_2.to_csv('Yongjeon_P_Median_2.csv')
rst_3 = get_cost_List_for_N_stations(demand_location_List=demand_location_List, station_location_List= station_location_List, demand_weight_Vector= weight_Vector, N=3)
rst_3.to_csv('Yongjeon_P_Median_3.csv')
